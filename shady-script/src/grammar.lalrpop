use ::ast;
use ::span;

grammar;

pub AST: ast::AST = <Spanned<Item>*> => ast::AST(<>);

Item: ast::Item = {
    "image" <Spanned<Block>> => ast::image(<>),
};

Block: ast::Block = "{" <(<Spanned<Stmt>> ";")*> <Spanned<Expr>?> "}" => ast::block(<>);

Stmt: ast::Stmt = {
    "return" <Spanned<Expr>> => ast::ret(<>),
    <Name> "=" <Spanned<Expr>> => ast::ass(<>),
    <ExprStmt> => ast::Stmt::Expr(<>),
};

Expr: ast::Expr = {
    <Spanned<Expr>> "<" <Spanned<Expr2>> => ast::lt(<>),
    <Spanned<Expr>> ">" <Spanned<Expr2>> => ast::gt(<>),
    <Spanned<Expr>> "==" <Spanned<Expr2>> => ast::eq(<>),
    Expr1
};

Expr1: ast::Expr = {
    <Spanned<Expr>> "+" <Spanned<Expr2>> => ast::add(<>),
    <Spanned<Expr>> "-" <Spanned<Expr2>> => ast::sub(<>),
    Expr2
};

Expr2: ast::Expr = {
    <Spanned<Expr2>> "*" <Spanned<ExprTerm>> => ast::mul(<>),
    <Spanned<Expr2>> "/" <Spanned<ExprTerm>> => ast::div(<>),
    ExprTerm
};

ExprTerm: ast::Expr = {
    "(" <Spanned<Expr>> "," <Spanned<Expr>> ")" => ast::vec2(<>),
    "(" <Spanned<Expr>> "," <Spanned<Expr>> "," <Spanned<Expr>> ")" => ast::vec3(<>),
    "true" => ast::t(),
    "false" => ast::f(),
    "x" => ast::Expr::KeyVar(ast::KeyVar::XPos),
    "y" => ast::Expr::KeyVar(ast::KeyVar::YPos),
    "t" => ast::Expr::KeyVar(ast::KeyVar::Time),
    Name => ast::var(<>),
    r"[0-9]+(\.[0-9]+)?" => ast::lit(<>),
    "(" <Expr> ")",
    <ExprStmt> => ast::Expr::Stmt(<>)
};

ExprStmt: ast::ExprStmt = {
    "if" <Spanned<Expr>> <Spanned<Block>> <("else" <Spanned<Block>>)?> => ast::ite(<>),
};

Name = r"[a-zA-Z][a-zA-Z0-9]*";

Spanned<T>: span::Spanned<T> = <l:@L> <data:T> <r:@R> => span::spanned(l, r, data);


